##
## vim: filetype=sh
##
## Shell functions for managing python virtual environments
##
## Copyright (c) 2010 Krzysztof Walo
##
## Permission is hereby granted, free of charge, to any person
## obtaining a copy of this software and associated documentation
## files (the "Software"), to deal in the Software without
## restriction, including without limitation the rights to use,
## copy, modify, merge, publish, distribute, sublicense, and/or sell
## copies of the Software, and to permit persons to whom the
## Software is furnished to do so, subject to the following
## conditions:
##
## The above copyright notice and this permission notice shall be
## included in all copies or substantial portions of the Software.
##
## THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
## EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
## OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
## NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
## HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
## WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
## FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
## OTHER DEALINGS IN THE SOFTWARE.
##

venvinit () {
    if [[ -z "$VENV_HOME" ]]; then
        VENV_HOME=~/.venv
    fi
    if [[ ! -d "$VENV_HOME" ]]; then
        mkdir -p "$VENV_HOME"
    fi
    if [[ -z "$VENV_PRESERVE_PS1" ]]; then
        VENV_PRESERVE_PS1=0
    fi
    VENV_LOADED=1
}

venv () {
    local action virtualenv
    action=$1
    if [[ -n $action ]]; then
        shift 1
    fi
    case $action in
        create)
        venv_run_command create $@
        ;;
        remove|rm)
        venv_run_command remove $@
        ;;
        activate)
        venv_run_command activate $@
        ;;
        deactivate|off)
        venv_run_command deactivate $@
        ;;
        list|ls)
            venv_run_command list $@
        ;;
        cd)
        venv_run_command cd $@
        ;;
        sp|site-packages)
        venv_run_command site_packages $@
        ;;
        lsp|ls-site-packages)
        venv_run_command ls-site-packages $@
        ;;
        help|--help)
        venv_help $@
        ;;
        *)
        test -n "$action" && venv_activate $action $@
        if [[ $? != 0 ]]; then
            venv_help
            return 1
        fi
        ;;
    esac
}

venv_function_defined () {
    if [[ -n "$ZSH_NAME" ]]; then
        functions $1 > /dev/null 2>&1
    elif [[ -n "$BASH" ]]; then
        typeset -F $1 > /dev/null
    else
        return 1
    fi
}

venv_set_path () {
    if [[ -z "$1" ]]; then
        return 1
    fi
    if [[ "$1" != $(basename "$1") ]]; then
        return 1
    fi
    virtualenv="${VENV_HOME}/$1"
    if [[ ! -d "$virtualenv" ]]; then
        unset virtualenv
        return 1
    fi
    return 0
}

venv_run_command () {
    local command=$1
    case "$2" in
        --help|-h)
            venv_help_$command
            ;;
        *)
            shift 1
            venv_$command $@
            ;;
    esac

}

venv_help () {
    local command=$1
    if [[ -z "$command" ]]; then
        venv_help_basic
    elif [[ -n "$command" ]] && venv_function_defined venv_help_"$command"; then
        venv_help_"$command"
    else
        echo "ERROR: No such command: $command"
        return 1
    fi
}

venv_help_basic () {
    echo "Usage: venv COMMAND [virtualenv] [OPTIONS]"
    echo "       venv virtualenv (activates virtualenv)"
    echo
    echo "Available commands:"
    echo "   create"
    echo "   remove (rm)"
    echo "   activate"
    echo "   deactivate (off)"
    echo "   list (ls)"
    echo "   cd"
    echo "   site-packages (sp)"
    echo "   ls-site-packages (lsp)"
    echo
    echo "For more info type: venv help COMMAND"
}

venv_help_list () {
    echo "Usage: venv list"
    echo
    echo "Lists all virtual environments created by venv"
}

venv_list () {
    ls -1 $VENV_HOME
}

venv_help_create () {
    echo "Usage: venv create VIRTUALENV [OPTIONS]"
    echo
    echo 'Create new virtualenv'
    echo "This command creates new virtualenv inside \$VENV_HOME directory"
    echo "OPTIONS are passed directly to virtualenv command."
}

venv_create () {
    test -z "$1" && venv_help_create && return 1
    if [[ "$1" != $(basename "$1") ]]; then
        echo "ERROR: Invalid virtualenv name!"
        return 1
    fi
    venv_set_path $1 && echo "ERROR: Virtualenv already exists!" && return 1
    virtualenv="${VENV_HOME}/$1"
    shift 1
    virtualenv $@ $virtualenv
}

venv_help_remove () {
    echo "Usage: venv remove VIRTUALENV"
    echo
    echo "Permanently removes virtualenv"
}

venv_remove() {
    test -z "$1" && venv_help_remove && return 1
    if [[ "$1" = "$venv_name" ]]; then
        echo "ERROR: Cannot remove active virtualenv!"
        return 1
    fi
    venv_set_path $1 ||  echo "Virtualenv $1 doesn't exist" && return 1
    rm -fr $virtualenv
}

venv_help_activate () {
    echo "Usage: venv activate VIRTUALENV"
    echo
    echo "Activates virtualenv"
}

venv_activate () {
    test -z "$1" && venv_help_activate && return 1
    venv_set_path $1 || return 1
    local OLD_PS1=$PS1
    source $virtualenv/bin/activate
    if [[ $VENV_PRESERVE_PS1 -eq 1 ]]; then
        PS1=$OLD_PS1
    fi
    if [[ -n $VIRTUAL_ENV ]]; then
        venv_name=$(basename $VIRTUAL_ENV)
    fi
}

venv_help_deactivate () {
    echo "Usage: venv deactivate"
    echo
    echo "Deactivates virtualenv"
}

venv_deactivate () {
    deactivate
    unset venv_name
}

venv_help_cd () {
    echo "Usage: venv cd [VIRTUALENV]"
    echo
    echo "Changes current directory to VIRTUALENV."
    echo "If VIRTUALENV options is ommited, it changes directory to currently"
    echo "active virtualenv."
}

venv_cd() {
    virtualenv=$1
    if [[ -n "$virtualenv" ]]; then
        venv_set_path $1 || return 1
    elif [[ -n "$VIRTUAL_ENV" ]]; then
        virtualenv=$VIRTUAL_ENV
    else
        echo "Virtual env is not specified and none is active"
        return 1
    fi
    cd $virtualenv
}

venv_help_site-packages () {
    echo "Usage: venv site-packages [VIRTUALENV]"
    echo
    echo "Changes directory to site-packages directory of virtualenv"
}

venv_site_packages() {
    virtualenv=$1
    if [[ -n "$virtualenv" ]]; then
        venv_set_path $1 || return 1
    elif [[ -n "$VIRTUAL_ENV" ]]; then
        virtualenv=$VIRTUAL_ENV
    else
        echo "Virtual env is not specified and none is active"
        return 1
    fi
    local major_version=$(python -V 2>&1 | sed -e 's/^[^0-9]*//' -e 's/\.[0-9]$//')
    cd $virtualenv/lib/python$major_version/site-packages
}

venv_help_ls-site-packages () {
    echo "Usage venv ls-site-packages [VIRTUALENV]"
    echo
    echo "Lists contents of site-packages directory"
}

venv_ls-site-packages() {
    virtualenv=$1
    if [[ -n "$virtualenv" ]]; then
        venv_set_path $1 || return 1
    elif [[ -n "$VIRTUAL_ENV" ]]; then
        virtualenv=$VIRTUAL_ENV
    else
        echo "Virtual env is not specified and none is active"
        return 1
    fi
    ls $virtualenv/lib/python*/site-packages
}

venvinit "$@"
